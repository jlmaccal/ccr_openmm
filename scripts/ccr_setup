#!/usr/bin/env python
# encoding: utf-8


import argparse
import math
from simtk.openmm.app import pdbfile
from simtk.openmm import XmlSerializer, CustomExternalForce
from simtk.unit import nanometer
import os
from xml.etree import ElementTree as ET


STATE_A_DIR = 'StateA'
STATE_B_DIR = 'StateB'


def parse_args():
    parser = argparse.ArgumentParser(description='This script will setup a CCR run.')

    #
    # system description
    #
    parser.add_argument('system_a', metavar='system_a.xml',
                        help='serialized openmm system describing the system to be simulated for state A')

    parser.add_argument('system_b', metavar='system_b.xml',
                        help='serialized openmm system describing the system to be simulated for state B')

    parser.add_argument('state_a', metavar='state_a.pdb',
                        help='PDB file of reference for state A of the system')

    parser.add_argument('state_b', metavar='state_b.pdb',
                        help='PDB file of reference for state B of the system')

    #
    # confinement
    #
    parser.add_argument('--conf-steps', type=int, default=20,
                        help='number of confinement steps (default: 20)')

    parser.add_argument('--conf-min-k', type=float, default=0.4,
                        help='minimum force constant in kJ/mol/nm^2 (default: 0.4)')

    parser.add_argument('--conf-max-k', type=float, default=10000.,
                        help='minimum force constant in kJ/mol/nm^2 (default: 10000)')

    #
    # defining states
    #
    parser.add_argument('--state-width', type=float, default=0.3,
                        help='amount each atom can move (in nm) from the reference with zero energy (default: 0.3)')

    parser.add_argument('--state-k', type=float, default=5000.,
                        help='force constant for atoms that move too far from reference in kJ/mol/nm^2 (default: 5000)')

    parser.add_argument('--state-index-file', default=None,
                        help='file listing atom indices (zero-based, one per line) ' +
                        'to apply state restraints to (default: all atoms)')

    parser.add_argument('--no-state-restraints', default=False, action='store_true',
                        help='do not apply any state restraints. In this case, they should already be in the ' +
                        'system.xml files.')

    return parser.parse_args()


def main():
    args = parse_args()

    # get a list of confinement restraint strengths and write to disk
    ks = get_restraint_strengths(args.conf_steps, args.conf_min_k, args.conf_max_k)
    write_restraint_file(ks)

    # load the serialized xml files
    system_a = open(args.system_a).read()
    system_b = open(args.system_b).read()

    # load the pdb files
    struct_a = pdbfile.PDBFile(args.state_a)
    struct_b = pdbfile.PDBFile(args.state_b)

    # output state A
    print 'Setting up State A'
    os.mkdir(STATE_A_DIR)
    os.chdir(STATE_A_DIR)
    handle_state(system_a, struct_a, ks, args.state_width, args.state_k, args.state_index_file, args.no_state_restraints)
    os.chdir('..')
    print

    # output state B
    print 'Setting up State B'
    os.mkdir(STATE_B_DIR)
    os.chdir(STATE_B_DIR)
    handle_state(system_b, struct_b, ks, args.state_width, args.state_k, args.state_index_file, args.no_state_restraints)
    os.chdir('..')
    print
    print 'Done!'
    print


def get_restraint_strengths(n_steps, min_k, max_k):
    delta = math.log(max_k) - math.log(min_k)
    ks = []
    for i in range(n_steps):
        frac = float(i) / float(n_steps - 1)
        ks.append(math.exp(delta * frac + math.log(min_k)))
    return ks


def write_restraint_file(ks):
    with open('restraint_strengths.txt', 'w') as outfile:
        print >>outfile, '# this file is automatically generated by ccr_set'
        print >>outfile, '# DO NOT EDIT'
        for k in ks:
            print >>outfile, k


def handle_state(system, structure, ks, width, state_k, index_file, no_rests):
    system = XmlSerializer.deserializeSystem(system)

    com_transformer = RemoveCom()
    state_rest_transformer = AddStateRest(structure, width, state_k, index_file, no_rests)

    system = state_rest_transformer.apply(com_transformer.apply(system))

    for i, k in enumerate(ks):
        print '    Setting up confinement step {}.'.format(i + 1)
        path = 'Step_{:03d}'.format(i + 1)
        os.mkdir(path)
        os.chdir(path)
        conf_rest_transformer = AddConfRest(structure, k)
        new_system = conf_rest_transformer.apply(system)

        with open('system.pdb', 'w') as outpdb:
            structure.writeFile(structure.getTopology(), structure.getPositions(), outpdb)

        with open('system.xml', 'w') as outfile:
            outfile.write(XmlSerializer.serializeSystem(new_system))

        os.chdir('..')


class RemoveCom(object):
    '''Remove the CMMotionRemover force if it is present.'''
    def apply(self, system):
        print '    Removing CMMotionRemover forces'
        # get the xml for the system
        system_xml = XmlSerializer.serializeSystem(system)

        # remove the CMMotionRemover at the xml level; gross but effective
        root = ET.fromstring(system_xml)
        forces = root.find('Forces')
        com_forces = forces.findall('./Force[@type="CMMotionRemover"]')
        for com in com_forces:
            forces.remove(com)

        # turn the xml back into a system and return it
        system = XmlSerializer.deserializeSystem(ET.tostring(root))
        return system


class AddStateRest(object):
    def __init__(self, structure, width, k, index_file, no_rests):
        self.positions = structure.getPositions().value_in_unit(nanometer)
        self.width = width
        self.k = k
        self.no_rests = no_rests
        self.indices = None
        self.force_string = None

        self._setup_indices(index_file)
        self._setup_force_string()

    def _setup_indices(self, index_file):
        if index_file is None:
            n_atoms = len(self.positions)
            self.indices = list(range(n_atoms))
        else:
            raise NotImplementedError()

    def _setup_force_string(self):
        force_lines = [
            '0.5 * k_state * reff^2 * step(reff); ',
            'reff = r - width_state; ',
            'r = sqrt((x - x0)^2 + (y - y0)^2 + (z - z0)^2);']
        self.force_string = ''.join(force_lines)

    def apply(self, system):
        # create a copy of the system by de/serializing
        system = XmlSerializer.deserializeSystem(XmlSerializer.serializeSystem(system))

        if self.no_rests:
            print '    WARNING: Not adding state restraints. In this case,'
            print '             these should already be in your system.xml'
            print '             files.'
        else:
            print '    Adding state restraints'

            # create our new force
            force = CustomExternalForce(self.force_string)
            force.addGlobalParameter('k_state', self.k)
            force.addGlobalParameter('width_state', self.width)
            force.addPerParticleParameter('x0')
            force.addPerParticleParameter('y0')
            force.addPerParticleParameter('z0')

            # add the particles
            for index in self.indices:
                x0, y0, z0 = self.positions[index]
                force.addParticle(index, [x0, y0, z0])

            # add the force to the system and return it
            system.addForce(force)
        return system


class AddConfRest(object):
    def __init__(self, structure, k):
        self.positions = structure.getPositions().value_in_unit(nanometer)
        self.k = k
        self.indices = list(range(len(self.positions)))

    def apply(self, system):
        # create a copy of the system by de/serializing
        system = XmlSerializer.deserializeSystem(XmlSerializer.serializeSystem(system))

        force_string = '0.5 * k_conf * r^2; r = sqrt((x - x0)^2 + (y - y0)^2 + (z - z0)^2);'
        force = CustomExternalForce(force_string)
        force.addGlobalParameter('k_conf', self.k)
        force.addPerParticleParameter('x0')
        force.addPerParticleParameter('y0')
        force.addPerParticleParameter('z0')

        # add the particles
        for index in self.indices:
            x0, y0, z0 = self.positions[index]
            force.addParticle(index, [x0, y0, z0])

        # add the force to the system and return it
        system.addForce(force)
        return system


if __name__ == '__main__':
    main()
